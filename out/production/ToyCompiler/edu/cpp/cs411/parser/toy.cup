package edu.cpp.cs411.parser;
import java_cup.runtime.*;
class Parser;

parser code {: public void syntax_error(Symbol cur_token){System.out.println("\n[reject]");}; :};

/* Terminals (tokens returned by the scanner). */
terminal         BOOLEAN, BREAK, CLASS, DOUBLE, ELSE, EXTENDS, FOR, IF, IMPLEMENTS, INT,
                 INTERFACE, NEWARRAY, PRINTLN, READLN, RETURN, STRING, VOID, WHILE, PLUS, MINUS, MULTIPLICATION,
                 DIVISION, MOD, LESS, LESSEQUAL, GREATER, GREATEREQUAL, EQUAL, NOTEQUAL, AND, OR,
                 NOT, ASSIGNOP, SEMICOLON, COMMA, PERIOD, LEFTPAREN, RIGHTPAREN, LEFTBRACKET, RIGHTBRACKET, LEFTBRACE,
                 RIGHTBRACE, INTCONSTANT, DOUBLECONSTANT, STRINGCONSTANT, BOOLEANCONSTANT, ID;


/* Non terminals */
non terminal     Program, DeclPlus, Decl, VariableDecl, FunctionDecl, ClassDecl, InterfaceDecl,
                 Variable, Type, T, Formals, StmtBlock, OptionalExtends, OptionalImplements,
                 FieldStar, IdPlusComma, Field, PrototypeStar, Prototype, VariableDeclPlus,
                 StmtPlus, Stmt, OptionalExpr, Expr, IfStmt, OptionalElse, WhileStmt,
                 ForStmt, BreakStmt, ReturnStmt, PrintStmt, ExprPlusComma, Lvalue,
                 Constant, Call, Actuals;

/* Precedences */
precedence left ELSE;
precedence nonassoc ASSIGNOP;
precedence left OR;
precedence left AND;
precedence left EQUAL, NOTEQUAL;
precedence nonassoc LESS, LESSEQUAL, GREATER, GREATEREQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLICATION, DIVISION, MOD;
precedence nonassoc NOT;
precedence nonassoc LEFTBRACKET, PERIOD;


/* The grammar rules */
Program ::= DeclPlus {: System.out.print("[reduce 1]");:}
;
DeclPlus ::= Decl {: System.out.print("[reduce 2]");:}
            | Decl DeclPlus {: System.out.print("[reduce 3]");:}
;
Decl ::= VariableDecl {: System.out.print("[reduce 4]");:}
        | FunctionDecl {: System.out.print("[reduce 5]");:}
        | ClassDecl {: System.out.print("[reduce 6]");:}
        | InterfaceDecl {: System.out.print("[reduce 7]");:}
;
VariableDecl ::= Variable SEMICOLON {: System.out.print("[reduce 8]");:}
;
Variable ::= Type ID {: System.out.print("[reduce 9]");:}
;
Type ::= INT T {: System.out.print("[reduce 10]");:}
       | DOUBLE T {: System.out.print("[reduce 11]");:}
       | BOOLEAN T {: System.out.print("[reduce 12]");:}
       | STRING T {: System.out.print("[reduce 13]");:}
       | ID T {: System.out.print("[reduce 14]");:}
;
T ::= LEFTBRACKET RIGHTBRACKET T {: System.out.print("[reduce 15]");:}
    | /* empty */ {: System.out.print("[reduce 16]");:}
;
FunctionDecl ::= Type ID LEFTPAREN Formals RIGHTPAREN StmtBlock {: System.out.print("[reduce 17]");:}
              | VOID ID LEFTPAREN Formals RIGHTPAREN StmtBlock {: System.out.print("[reduce 18]");:}
;
Formals ::= Variable {: System.out.print("[reduce 19]");:}
          | Variable COMMA Formals {: System.out.print("[reduce 20]");:}
          | /* empty */ {: System.out.print("[reduce 21]");:}
;
ClassDecl ::= CLASS ID OptionalExtends OptionalImplements LEFTBRACE FieldStar RIGHTBRACE {: System.out.print("[reduce 22]");:}
;
OptionalExtends ::= EXTENDS ID {: System.out.print("[reduce 23]");:}
          | /* empty */ {: System.out.print("[reduce 24]");:}
;
OptionalImplements ::= IMPLEMENTS IdPlusComma {: System.out.print("[reduce 25]");:}
                    | /* empty */ {: System.out.print("[reduce 26]");:}
;
IdPlusComma ::= ID {: System.out.print("[reduce 27]");:}
              | ID COMMA IdPlusComma {: System.out.print("[reduce 28]");:}
;
FieldStar ::= Field FieldStar {: System.out.print("[reduce 29]");:}
            | /* empty */ {: System.out.print("[reduce 30]");:}
;
Field ::= VariableDecl {: System.out.print("[reduce 31]");:}
        | FunctionDecl {: System.out.print("[reduce 32]");:}
;
InterfaceDecl ::= INTERFACE ID LEFTBRACE PrototypeStar RIGHTBRACE {: System.out.print("[reduce 33]");:}
;
PrototypeStar ::= Prototype PrototypeStar {: System.out.print("[reduce 34]");:}
                | /* empty */ {: System.out.print("[reduce 35]");:}
;
Prototype ::= Type ID LEFTPAREN Formals RIGHTPAREN SEMICOLON {: System.out.print("[reduce 36]");:}
            | VOID ID LEFTPAREN Formals RIGHTPAREN SEMICOLON {: System.out.print("[reduce 37]");:}
;
StmtBlock ::= LEFTBRACE VariableDeclPlus StmtPlus RIGHTBRACE {: System.out.print("[reduce 38]");:}
            | LEFTBRACE VariableDeclPlus RIGHTBRACE {: System.out.print("[reduce 39]");:}
            | LEFTBRACE StmtPlus RIGHTBRACE {: System.out.print("[reduce 40]");:}
            | LEFTBRACE RIGHTBRACE {: System.out.print("[reduce 41]");:}
;
VariableDeclPlus ::= VariableDeclPlus VariableDecl {: System.out.print("[reduce 42]");:}
                  | VariableDecl {: System.out.print("[reduce 43]");:}
;
StmtPlus ::= StmtPlus Stmt {: System.out.print("[reduce 44]");:}
           | Stmt {: System.out.print("[reduce 45]");:}
;
Stmt ::= OptionalExpr SEMICOLON {: System.out.print("[reduce 46]");:}
       | IfStmt {: System.out.print("[reduce 47]");:}
       | WhileStmt {: System.out.print("[reduce 48]");:}
       | ForStmt {: System.out.print("[reduce 49]");:}
       | BreakStmt {: System.out.print("[reduce 5]");:}
       | ReturnStmt {: System.out.print("[reduce 51]");:}
       | PrintStmt {: System.out.print("[reduce 52]");:}
       | StmtBlock {: System.out.print("[reduce 53]");:}
;
OptionalExpr ::= Expr {: System.out.print("[reduce 54]");:}
               | /* empty */ {: System.out.print("[reduce 55]");:}
;
IfStmt ::= IF LEFTPAREN Expr RIGHTPAREN Stmt OptionalElse {: System.out.print("[reduce 56]");:}
;
OptionalElse ::= ELSE Stmt {: System.out.print("[reduce 57]");:}
              | /* empty */ {: System.out.print("[reduce 58]");:}
;
WhileStmt ::= WHILE LEFTPAREN Expr RIGHTPAREN Stmt {: System.out.print("[reduce 59]");:}
;
ForStmt ::= FOR LEFTPAREN OptionalExpr SEMICOLON Expr SEMICOLON OptionalExpr RIGHTPAREN Stmt {: System.out.print("[reduce 60]");:}
;
BreakStmt ::= BREAK SEMICOLON {: System.out.print("[reduce 61]");:}
;
ReturnStmt ::= RETURN OptionalExpr SEMICOLON {: System.out.print("[reduce 62]");:}
;
PrintStmt ::= PRINTLN LEFTPAREN ExprPlusComma RIGHTPAREN SEMICOLON {: System.out.print("[reduce 63]");:}
;
ExprPlusComma ::= Expr {: System.out.print("[reduce 64]");:}
               | Expr COMMA ExprPlusComma {: System.out.print("[reduce 65]");:}
;
Expr ::= Lvalue ASSIGNOP Expr {: System.out.print("[reduce 66]");:}
       | Constant {: System.out.print("[reduce 67]");:}
       | Lvalue {: System.out.print("[reduce 68]");:}
       | Call {: System.out.print("[reduce 69]");:}
       | LEFTPAREN Expr RIGHTPAREN {: System.out.print("[reduce 70]");:}
       | Expr PLUS Expr {: System.out.print("[reduce 71]");:}
       | Expr MINUS Expr {: System.out.print("[reduce 72]");:}
       | Expr MULTIPLICATION Expr {: System.out.print("[reduce 73]");:}
       | Expr DIVISION Expr {: System.out.print("[reduce 74]");:}
       | Expr MOD Expr {: System.out.print("[reduce 75]");:}
       | MINUS Expr {: System.out.print("[reduce 76]");:}
       | Expr LESS Expr {: System.out.print("[reduce 77]");:}
       | Expr LESSEQUAL Expr {: System.out.print("[reduce 78]");:}
       | Expr GREATER Expr {: System.out.print("[reduce 79]");:}
       | Expr GREATEREQUAL Expr {: System.out.print("[reduce 80]");:}
       | Expr EQUAL Expr {: System.out.print("[reduce 81]");:}
       | Expr NOTEQUAL Expr {: System.out.print("[reduce 82]");:}
       | Expr AND Expr {: System.out.print("[reduce 83]");:}
       | Expr OR Expr {: System.out.print("[reduce 84]");:}
       | NOT Expr {: System.out.print("[reduce 85]");:}
       | READLN LEFTPAREN RIGHTPAREN {: System.out.print("[reduce 86]");:}
       | NEWARRAY LEFTPAREN INTCONSTANT COMMA Type RIGHTPAREN {: System.out.print("[reduce 87]");:}
;
Lvalue ::= ID {: System.out.print("[reduce 88]");:}
         | Lvalue LEFTBRACKET Expr RIGHTBRACKET {: System.out.print("[reduce 89]");:}
         | Lvalue PERIOD ID {: System.out.print("[reduce 90]");:}
;
Call ::= ID LEFTPAREN Actuals RIGHTPAREN {: System.out.print("[reduce 91]");:}
       | ID PERIOD ID LEFTPAREN Actuals RIGHTPAREN {: System.out.print("[reduce 92]");:}
;
Actuals ::= ExprPlusComma  {: System.out.print("[reduce 93]");:}
          | /* empty */ {: System.out.print("[reduce 94]");:}
;
Constant ::= INTCONSTANT  {: System.out.print("[reduce 95]");:}
           | DOUBLECONSTANT  {: System.out.print("[reduce 96]");:}
           | STRINGCONSTANT  {: System.out.print("[reduce 97]");:}
           | BOOLEANCONSTANT  {: System.out.print("[reduce 98]");:}
;
